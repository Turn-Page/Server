plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// security
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	implementation 'commons-io:commons-io:2.6'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//open API
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

jacocoTestReport {

	reports {
		// 리포트 타입마다 리포트 저장 경로를 설정할 수 있습니다.
		html.destination file("jacoco/report.html")
	}

	//jacocoTestReport 가 끝나면 jacocoTestCoverageVerification 실행
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	// 커버리지의 범위와 퍼센테이지를 설정합니다.
	violationRules {
		rule {
			enabled = true  // 커버리지 적용
			element = 'CLASS'		// class 단위로 룰을 체크합니다.

			// 라인 커버리지 설정
			//한줄한줄 따졌을 때 테스트 코드가 작성되어있는 줄의 빈도
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.0 // minumum설정 시 해당 커버리지 이하일 경우 빌드 되지 않음
			}

		}
	}
}
